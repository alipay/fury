// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`codeGen can generate tuple declaration code 1`] = `
"function anonymous(
) {
return function(fury, external) {
  const br = fury.binaryReader;
  const bw = fury.binaryWriter;
  const cr = fury.classResolver;
  const rr = fury.referenceResolver;
  const tag_ser_3 = fury.classResolver.getSerializerByTag("example.foo.1");
  const tag_ser_4 = fury.classResolver.getSerializerByTag("example.foo.2");
  const tag_ser_12 = fury.classResolver.getSerializerByTag("example.bar.1");
  const tag_ser_13 = fury.classResolver.getSerializerByTag("example.bar.2");
  const tagWriter_19 = cr.createTagWriter("tuple-object-wrapper");
  
  const readInner = () => {
    
    if (br.int32() !== 16469457) {
      throw new Error("validate hash failed: tuple-object-wrapper. expect 16469457");
    }
    const result_0 = {
      tuple1: null,
      tuple1_: null,
      tuple2: null,
      tuple2_: null
    };
    rr.pushReadObject(result_0)
    
    switch (br.int8()) {
      case -1:
      case 0:
        if (br.int16() === 256) {
          cr.readTag(br);
        }
        
        const len_2 = br.varUInt32();
        const result_1 = new Array(len_2);
        rr.pushReadObject(result_1)
        
        if (len_2 > 0) {
          result_1[0] = tag_ser_3.read()
        }
        
        
        if (len_2 > 1) {
          result_1[1] = tag_ser_4.read()
        }
        
        result_0.tuple1 = result_1
        
        break;
      case -2:
        result_0.tuple1 = rr.getReadObjectByRefId(br.varUInt32())
        break;
      case -3:
        result_0.tuple1 = null
        break;
    };
    
    switch (br.int8()) {
      case -1:
      case 0:
        if (br.int16() === 256) {
          cr.readTag(br);
        }
        
        const len_6 = br.varUInt32();
        const result_5 = new Array(len_6);
        rr.pushReadObject(result_5)
        
        if (len_6 > 0) {
          result_5[0] = tag_ser_3.read()
        }
        
        
        if (len_6 > 1) {
          result_5[1] = tag_ser_4.read()
        }
        
        result_0.tuple1_ = result_5
        
        break;
      case -2:
        result_0.tuple1_ = rr.getReadObjectByRefId(br.varUInt32())
        break;
      case -3:
        result_0.tuple1_ = null
        break;
    };
    
    switch (br.int8()) {
      case -1:
      case 0:
        if (br.int16() === 256) {
          cr.readTag(br);
        }
        
        const len_10 = br.varUInt32();
        const result_9 = new Array(len_10);
        rr.pushReadObject(result_9)
        
        if (len_10 > 0) {
          result_9[0] = tag_ser_3.read()
        }
        
        
        if (len_10 > 1) {
          result_9[1] = tag_ser_12.read()
        }
        
        
        if (len_10 > 2) {
          result_9[2] = tag_ser_13.read()
        }
        
        result_0.tuple2 = result_9
        
        break;
      case -2:
        result_0.tuple2 = rr.getReadObjectByRefId(br.varUInt32())
        break;
      case -3:
        result_0.tuple2 = null
        break;
    };
    
    switch (br.int8()) {
      case -1:
      case 0:
        if (br.int16() === 256) {
          cr.readTag(br);
        }
        
        const len_15 = br.varUInt32();
        const result_14 = new Array(len_15);
        rr.pushReadObject(result_14)
        
        if (len_15 > 0) {
          result_14[0] = tag_ser_3.read()
        }
        
        
        if (len_15 > 1) {
          result_14[1] = tag_ser_12.read()
        }
        
        
        if (len_15 > 2) {
          result_14[2] = tag_ser_13.read()
        }
        
        result_0.tuple2_ = result_14
        
        break;
      case -2:
        result_0.tuple2_ = rr.getReadObjectByRefId(br.varUInt32())
        break;
      case -3:
        result_0.tuple2_ = null
        break;
    }
    
    return result_0
    
  };
  const read = () => {
    
    switch (br.int8()) {
      case -1:
      case 0:
        if (br.int16() === 256) {
          cr.readTag(br);
        }
        return readInner()
        break;
      case -2:
        return rr.getReadObjectByRefId(br.varUInt32())
        break;
      case -3:
        return null
        break;
    }
    
  };
  const writeInner = (v) => {
    
    tagWriter_19.write(bw);
    bw.int32(16469457);
    
    const existsId_22 = rr.existsWriteObject(v.tuple1);
    if (typeof existsId_22 === "number") {
      bw.int8(-2)
      bw.varUInt32(existsId_22)
    } else {
      rr.pushWriteObject(v.tuple1)
      
      if (v.tuple1 !== null && v.tuple1 !== undefined) {
        bw.int24(6400);
        
        bw.varUInt32(2)
        bw.reserve(148);
        tag_ser_3.write(v.tuple1[0])
        tag_ser_4.write(v.tuple1[1]);
      } else {
        bw.int8(-3);
      }
      
    };
    
    const existsId_25 = rr.existsWriteObject(v.tuple1_);
    if (typeof existsId_25 === "number") {
      bw.int8(-2)
      bw.varUInt32(existsId_25)
    } else {
      rr.pushWriteObject(v.tuple1_)
      
      if (v.tuple1_ !== null && v.tuple1_ !== undefined) {
        bw.int24(6400);
        
        bw.varUInt32(2)
        bw.reserve(148);
        tag_ser_3.write(v.tuple1_[0])
        tag_ser_4.write(v.tuple1_[1]);
      } else {
        bw.int8(-3);
      }
      
    };
    
    const existsId_29 = rr.existsWriteObject(v.tuple2);
    if (typeof existsId_29 === "number") {
      bw.int8(-2)
      bw.varUInt32(existsId_29)
    } else {
      rr.pushWriteObject(v.tuple2)
      
      if (v.tuple2 !== null && v.tuple2 !== undefined) {
        bw.int24(6400);
        
        bw.varUInt32(3)
        bw.reserve(222);
        tag_ser_3.write(v.tuple2[0])
        tag_ser_12.write(v.tuple2[1])
        tag_ser_13.write(v.tuple2[2]);
      } else {
        bw.int8(-3);
      }
      
    };
    
    const existsId_33 = rr.existsWriteObject(v.tuple2_);
    if (typeof existsId_33 === "number") {
      bw.int8(-2)
      bw.varUInt32(existsId_33)
    } else {
      rr.pushWriteObject(v.tuple2_)
      
      if (v.tuple2_ !== null && v.tuple2_ !== undefined) {
        bw.int24(6400);
        
        bw.varUInt32(3)
        bw.reserve(222);
        tag_ser_3.write(v.tuple2_[0])
        tag_ser_12.write(v.tuple2_[1])
        tag_ser_13.write(v.tuple2_[2]);
      } else {
        bw.int8(-3);
      }
      
    }
    
    
  };
  const write = (v) => {
    
    const existsId_34 = rr.existsWriteObject(v);
    if (typeof existsId_34 === "number") {
      bw.int8(-2)
      bw.varUInt32(existsId_34)
    } else {
      rr.pushWriteObject(v)
      
      if (v !== null && v !== undefined) {
        bw.int24(65536);
        writeInner(v);
      } else {
        bw.int8(-3);
      }
      
    }
    
  };
  
  return {
    read,
    readInner,
    write,
    writeInner,
    meta: {
      "fixedSize": 67,
      "noneable": true
    }
  };
}
}"
`;

exports[`codeGen can generate tuple declaration code 2`] = `
"function anonymous(
) {
return function(fury, external) {
  const br = fury.binaryReader;
  const bw = fury.binaryWriter;
  const cr = fury.classResolver;
  const rr = fury.referenceResolver;
  const tagWriter_6 = cr.createTagWriter("tuple-object-type3-tag");
  
  const readInner = () => {
    
    if (br.int32() !== 552) {
      throw new Error("validate hash failed: tuple-object-type3-tag. expect 552");
    }
    const result_0 = {
      tuple: null
    };
    rr.pushReadObject(result_0)
    
    switch (br.int8()) {
      case -1:
      case 0:
        if (br.int16() === 256) {
          cr.readTag(br);
        }
        
        const len_2 = br.varUInt32();
        const result_1 = new Array(len_2);
        rr.pushReadObject(result_1)
        
        if (len_2 > 0) {
          
          switch (br.int8()) {
            case -1:
            case 0:
              if (br.int16() === 256) {
                cr.readTag(br);
              }
              result_1[0] = br.stringOfVarUInt32()
              break;
            case -2:
              result_1[0] = rr.getReadObjectByRefId(br.varUInt32())
              break;
            case -3:
              result_1[0] = null
              break;
          }
          
        }
        
        
        if (len_2 > 1) {
          
          switch (br.int8()) {
            case -1:
            case 0:
              if (br.int16() === 256) {
                cr.readTag(br);
              }
              result_1[1] = br.uint8() === 1
              break;
            case -2:
              result_1[1] = rr.getReadObjectByRefId(br.varUInt32())
              break;
            case -3:
              result_1[1] = null
              break;
          }
          
        }
        
        
        if (len_2 > 2) {
          
          switch (br.int8()) {
            case -1:
            case 0:
              if (br.int16() === 256) {
                cr.readTag(br);
              }
              result_1[2] = br.uint32()
              break;
            case -2:
              result_1[2] = rr.getReadObjectByRefId(br.varUInt32())
              break;
            case -3:
              result_1[2] = null
              break;
          }
          
        }
        
        
        if (len_2 > 3) {
          
          switch (br.int8()) {
            case -1:
            case 0:
              if (br.int16() === 256) {
                cr.readTag(br);
              }
              
              const len_4 = br.varUInt32();
              const result_3 = new Array(len_4);
              rr.pushReadObject(result_3)
              
              if (len_4 > 0) {
                
                switch (br.int8()) {
                  case -1:
                  case 0:
                    if (br.int16() === 256) {
                      cr.readTag(br);
                    }
                    
                    br.uint8()
                    result_5 = br.buffer(br.int32());
                    rr.pushReadObject(result_5);
                    result_3[0] = result_5
                    
                    break;
                  case -2:
                    result_3[0] = rr.getReadObjectByRefId(br.varUInt32())
                    break;
                  case -3:
                    result_3[0] = null
                    break;
                }
                
              }
              
              result_1[3] = result_3
              
              break;
            case -2:
              result_1[3] = rr.getReadObjectByRefId(br.varUInt32())
              break;
            case -3:
              result_1[3] = null
              break;
          }
          
        }
        
        result_0.tuple = result_1
        
        break;
      case -2:
        result_0.tuple = rr.getReadObjectByRefId(br.varUInt32())
        break;
      case -3:
        result_0.tuple = null
        break;
    }
    
    return result_0
    
  };
  const read = () => {
    
    switch (br.int8()) {
      case -1:
      case 0:
        if (br.int16() === 256) {
          cr.readTag(br);
        }
        return readInner()
        break;
      case -2:
        return rr.getReadObjectByRefId(br.varUInt32())
        break;
      case -3:
        return null
        break;
    }
    
  };
  const writeInner = (v) => {
    
    tagWriter_6.write(bw);
    bw.int32(552);
    
    const existsId_9 = rr.existsWriteObject(v.tuple);
    if (typeof existsId_9 === "number") {
      bw.int8(-2)
      bw.varUInt32(existsId_9)
    } else {
      rr.pushWriteObject(v.tuple)
      
      if (v.tuple !== null && v.tuple !== undefined) {
        bw.int24(6400);
        
        bw.varUInt32(4)
        bw.reserve(26);
        
        bw.int24(3583);
        if (v.tuple[0] !== null && v.tuple[0] !== undefined) {
          bw.stringOfVarUInt32(v.tuple[0]);
        } else {
          bw.stringOfVarUInt32("");
        }
        
        bw.int24(511);
        if (v.tuple[1] !== null && v.tuple[1] !== undefined) {
          bw.uint8(v.tuple[1] ? 1 : 0);
        } else {
          bw.uint8(0 ? 1 : 0);
        }
        
        bw.int24(1791);
        if (v.tuple[2] !== null && v.tuple[2] !== undefined) {
          bw.uint32(v.tuple[2]);
        } else {
          bw.uint32(0);
        }
        
        const existsId_8 = rr.existsWriteObject(v.tuple[3]);
        if (typeof existsId_8 === "number") {
          bw.int8(-2)
          bw.varUInt32(existsId_8)
        } else {
          rr.pushWriteObject(v.tuple[3])
          
          if (v.tuple[3] !== null && v.tuple[3] !== undefined) {
            bw.int24(6400);
            
            bw.varUInt32(1)
            bw.reserve(8);
            
            const existsId_7 = rr.existsWriteObject(v.tuple[3][0]);
            if (typeof existsId_7 === "number") {
              bw.int8(-2)
              bw.varUInt32(existsId_7)
            } else {
              rr.pushWriteObject(v.tuple[3][0])
              
              if (v.tuple[3][0] !== null && v.tuple[3][0] !== undefined) {
                bw.int24(3584);
                
                bw.uint8(1)
                bw.uint32(v.tuple[3][0].byteLength)
                bw.buffer(v.tuple[3][0]);
              } else {
                bw.int8(-3);
              }
              
            }
            
            ;
          } else {
            bw.int8(-3);
          }
          
        }
        
        ;
      } else {
        bw.int8(-3);
      }
      
    }
    
    
  };
  const write = (v) => {
    
    const existsId_10 = rr.existsWriteObject(v);
    if (typeof existsId_10 === "number") {
      bw.int8(-2)
      bw.varUInt32(existsId_10)
    } else {
      rr.pushWriteObject(v)
      
      if (v !== null && v !== undefined) {
        bw.int24(65536);
        writeInner(v);
      } else {
        bw.int8(-3);
      }
      
    }
    
  };
  
  return {
    read,
    readInner,
    write,
    writeInner,
    meta: {
      "fixedSize": 48,
      "noneable": true
    }
  };
}
}"
`;
