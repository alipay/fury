// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`codeGen can generate tuple declaration code 1`] = `
"function anonymous(
) {

return function (fury, scope) {
    const { referenceResolver, binaryWriter, classResolver, binaryReader } = fury;
    const { writeNullOrRef, pushReadObject } = referenceResolver;
    const { RefFlags, InternalSerializerType, arraySerializer, tupleSerializer, mapSerializer, setSerializer } = scope;
    
    const tag_0 = classResolver.getSerializerByTag("example.foo.1")
    const tag_1 = classResolver.getSerializerByTag("example.foo.2")
    const tuple_tag_0_tag_1 = tupleSerializer(fury, [tag_0, tag_1])
    const tag_5 = classResolver.getSerializerByTag("example.bar.1")
    const tag_6 = classResolver.getSerializerByTag("example.bar.2")
    const tuple_tag_0_tag_5_tag_6 = tupleSerializer(fury, [tag_0, tag_5, tag_6])
    const tagBuffer = classResolver.tagToBuffer("tuple-object-wrapper");
    const bufferLen = tagBuffer.byteLength;

    const reserves = tag_0.config().reserve + tag_1.config().reserve + tuple_tag_0_tag_1.config().reserve + tag_5.config().reserve + tag_6.config().reserve + tuple_tag_0_tag_5_tag_6.config().reserve;
    return {
        ...referenceResolver.deref(() => {
            const hash = binaryReader.int32();
            if (hash !== 16469457) {
                throw new Error("validate hash failed: tuple-object-wrapper. expect 16469457, but got" + hash);
            }
            {
                
    // relation tag: tuple-object-wrapper
    const result = {
        tuple1: null,
tuple1_: null,
tuple2: null,
tuple2_: null
    };
    pushReadObject(result);
    result.tuple1 = tuple_tag_0_tag_1.read();
result.tuple1_ = tuple_tag_0_tag_1.read();
result.tuple2 = tuple_tag_0_tag_5_tag_6.read();
result.tuple2_ = tuple_tag_0_tag_5_tag_6.read()
    return result;

            }
        }),
        write: referenceResolver.withNullableOrRefWriter(InternalSerializerType.FURY_TYPE_TAG, (v) => {
            classResolver.writeTag(binaryWriter, "tuple-object-wrapper", tagBuffer, bufferLen);
            binaryWriter.int32(16469457);
            binaryWriter.reserve(reserves);
            tuple_tag_0_tag_1.write(v.tuple1);
tuple_tag_0_tag_1.write(v.tuple1_);
tuple_tag_0_tag_5_tag_6.write(v.tuple2);
tuple_tag_0_tag_5_tag_6.write(v.tuple2_)
        }),
        config() {
            return {
                reserve: bufferLen + 8,
            }
        }
    }
}

}"
`;

exports[`codeGen can generate tuple declaration code 2`] = `
"function anonymous(
) {

return function (fury, scope) {
    const { referenceResolver, binaryWriter, classResolver, binaryReader } = fury;
    const { writeNullOrRef, pushReadObject } = referenceResolver;
    const { RefFlags, InternalSerializerType, arraySerializer, tupleSerializer, mapSerializer, setSerializer } = scope;
    
    const type_13 = classResolver.getSerializerById(13)
    const type_1 = classResolver.getSerializerById(1)
    const type_6 = classResolver.getSerializerById(6)
    const type_14 = classResolver.getSerializerById(14)
    const tuple_type_14 = tupleSerializer(fury, [type_14])
    const tuple_type_13_type_1_type_6_tuple_type_14 = tupleSerializer(fury, [type_13, type_1, type_6, tuple_type_14])
    const tagBuffer = classResolver.tagToBuffer("tuple-object-type3-tag");
    const bufferLen = tagBuffer.byteLength;

    const reserves = type_13.config().reserve + type_1.config().reserve + type_6.config().reserve + type_14.config().reserve + tuple_type_14.config().reserve + tuple_type_13_type_1_type_6_tuple_type_14.config().reserve;
    return {
        ...referenceResolver.deref(() => {
            const hash = binaryReader.int32();
            if (hash !== 552) {
                throw new Error("validate hash failed: tuple-object-type3-tag. expect 552, but got" + hash);
            }
            {
                
    // relation tag: tuple-object-type3-tag
    const result = {
        tuple: null
    };
    pushReadObject(result);
    result.tuple = tuple_type_13_type_1_type_6_tuple_type_14.read()
    return result;

            }
        }),
        write: referenceResolver.withNullableOrRefWriter(InternalSerializerType.FURY_TYPE_TAG, (v) => {
            classResolver.writeTag(binaryWriter, "tuple-object-type3-tag", tagBuffer, bufferLen);
            binaryWriter.int32(552);
            binaryWriter.reserve(reserves);
            tuple_type_13_type_1_type_6_tuple_type_14.write(v.tuple)
        }),
        config() {
            return {
                reserve: bufferLen + 8,
            }
        }
    }
}

}"
`;
