// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`codeGen can generate tuple declaration code 1`] = `
"function anonymous(
) {
return function(fury, external) {
  const br = fury.binaryReader;
  const bw = fury.binaryWriter;
  const cr = fury.classResolver;
  const rr = fury.referenceResolver;
  const tag_ser_4 = fury.classResolver.getSerializerByTag("example.foo.1");
  const tag_ser_5 = fury.classResolver.getSerializerByTag("example.foo.2");
  const tag_ser_15 = fury.classResolver.getSerializerByTag("example.bar.1");
  const tag_ser_16 = fury.classResolver.getSerializerByTag("example.bar.2");
  const tagWriter_39 = cr.createTagWriter("tuple-object-wrapper");
  
  const readInner = (fromRef) => {
    
    if (br.int32() !== 16469457) {
      throw new Error("validate hash failed: tuple-object-wrapper. expect 16469457");
    }
    const result_0 = {
      tuple1: null,
      tuple1_: null,
      tuple2: null,
      tuple2_: null
    };
    
    if (fromRef) {
      rr.reference(result_0)
    } else {
      
    }
    
    
    let fromRef_1 = false;
    switch (br.int8()) {
      case 0:
        fromRef_1 = true;
      case -1:
      case 0:
        if (br.int16() === 256) {
          cr.readTag(br);
        }
        
        const len_3 = br.varUInt32();
        const result_2 = new Array(len_3);
        
        if (fromRef_1) {
          rr.reference(result_2)
        } else {
          
        }
        
        
        if (len_3 > 0) {
          result_2[0] = tag_ser_4.read()
        }
        
        
        if (len_3 > 1) {
          result_2[1] = tag_ser_5.read()
        }
        
        result_0.tuple1 = result_2
        
        break;
      case -2:
        result_0.tuple1 = rr.getReadObject(br.varUInt32())
        break;
      case -3:
        result_0.tuple1 = null
        break;
    };
    
    let fromRef_6 = false;
    switch (br.int8()) {
      case 0:
        fromRef_6 = true;
      case -1:
      case 0:
        if (br.int16() === 256) {
          cr.readTag(br);
        }
        
        const len_8 = br.varUInt32();
        const result_7 = new Array(len_8);
        
        if (fromRef_6) {
          rr.reference(result_7)
        } else {
          
        }
        
        
        if (len_8 > 0) {
          result_7[0] = tag_ser_4.read()
        }
        
        
        if (len_8 > 1) {
          result_7[1] = tag_ser_5.read()
        }
        
        result_0.tuple1_ = result_7
        
        break;
      case -2:
        result_0.tuple1_ = rr.getReadObject(br.varUInt32())
        break;
      case -3:
        result_0.tuple1_ = null
        break;
    };
    
    let fromRef_11 = false;
    switch (br.int8()) {
      case 0:
        fromRef_11 = true;
      case -1:
      case 0:
        if (br.int16() === 256) {
          cr.readTag(br);
        }
        
        const len_13 = br.varUInt32();
        const result_12 = new Array(len_13);
        
        if (fromRef_11) {
          rr.reference(result_12)
        } else {
          
        }
        
        
        if (len_13 > 0) {
          result_12[0] = tag_ser_4.read()
        }
        
        
        if (len_13 > 1) {
          result_12[1] = tag_ser_15.read()
        }
        
        
        if (len_13 > 2) {
          result_12[2] = tag_ser_16.read()
        }
        
        result_0.tuple2 = result_12
        
        break;
      case -2:
        result_0.tuple2 = rr.getReadObject(br.varUInt32())
        break;
      case -3:
        result_0.tuple2 = null
        break;
    };
    
    let fromRef_17 = false;
    switch (br.int8()) {
      case 0:
        fromRef_17 = true;
      case -1:
      case 0:
        if (br.int16() === 256) {
          cr.readTag(br);
        }
        
        const len_19 = br.varUInt32();
        const result_18 = new Array(len_19);
        
        if (fromRef_17) {
          rr.reference(result_18)
        } else {
          
        }
        
        
        if (len_19 > 0) {
          result_18[0] = tag_ser_4.read()
        }
        
        
        if (len_19 > 1) {
          result_18[1] = tag_ser_15.read()
        }
        
        
        if (len_19 > 2) {
          result_18[2] = tag_ser_16.read()
        }
        
        result_0.tuple2_ = result_18
        
        break;
      case -2:
        result_0.tuple2_ = rr.getReadObject(br.varUInt32())
        break;
      case -3:
        result_0.tuple2_ = null
        break;
    }
    
    return result_0
    
  };
  const read = () => {
    
    let fromRef_23 = false;
    switch (br.int8()) {
      case 0:
        fromRef_23 = true;
      case -1:
      case 0:
        if (br.int16() === 256) {
          cr.readTag(br);
        }
        return readInner(true)
        break;
      case -2:
        return rr.getReadObject(br.varUInt32())
        break;
      case -3:
        return null
        break;
    }
    
  };
  const writeInner = (v) => {
    
    bw.int32(16469457);
    
    if (v.tuple1 !== null && v.tuple1 !== undefined) {
      const existsId_24 = rr.existsWriteObject(v.tuple1);
      if (typeof existsId_24 === "number") {
        bw.int8(-2)
        bw.varUInt32(existsId_24)
      } else {
        rr.writeRef(v.tuple1)
        bw.int24(6400);
        
        
        bw.varUInt32(2)
        bw.reserve(148);
        tag_ser_4.write(v.tuple1[0])
        tag_ser_5.write(v.tuple1[1]);
      }
    } else {
      bw.int8(-3);
    };
    
    if (v.tuple1_ !== null && v.tuple1_ !== undefined) {
      const existsId_27 = rr.existsWriteObject(v.tuple1_);
      if (typeof existsId_27 === "number") {
        bw.int8(-2)
        bw.varUInt32(existsId_27)
      } else {
        rr.writeRef(v.tuple1_)
        bw.int24(6400);
        
        
        bw.varUInt32(2)
        bw.reserve(148);
        tag_ser_4.write(v.tuple1_[0])
        tag_ser_5.write(v.tuple1_[1]);
      }
    } else {
      bw.int8(-3);
    };
    
    if (v.tuple2 !== null && v.tuple2 !== undefined) {
      const existsId_30 = rr.existsWriteObject(v.tuple2);
      if (typeof existsId_30 === "number") {
        bw.int8(-2)
        bw.varUInt32(existsId_30)
      } else {
        rr.writeRef(v.tuple2)
        bw.int24(6400);
        
        
        bw.varUInt32(3)
        bw.reserve(222);
        tag_ser_4.write(v.tuple2[0])
        tag_ser_15.write(v.tuple2[1])
        tag_ser_16.write(v.tuple2[2]);
      }
    } else {
      bw.int8(-3);
    };
    
    if (v.tuple2_ !== null && v.tuple2_ !== undefined) {
      const existsId_34 = rr.existsWriteObject(v.tuple2_);
      if (typeof existsId_34 === "number") {
        bw.int8(-2)
        bw.varUInt32(existsId_34)
      } else {
        rr.writeRef(v.tuple2_)
        bw.int24(6400);
        
        
        bw.varUInt32(3)
        bw.reserve(222);
        tag_ser_4.write(v.tuple2_[0])
        tag_ser_15.write(v.tuple2_[1])
        tag_ser_16.write(v.tuple2_[2]);
      }
    } else {
      bw.int8(-3);
    }
    
    
  };
  const write = (v) => {
    
    if (v !== null && v !== undefined) {
      const existsId_38 = rr.existsWriteObject(v);
      if (typeof existsId_38 === "number") {
        bw.int8(-2)
        bw.varUInt32(existsId_38)
      } else {
        rr.writeRef(v)
        bw.int24(65536);
        tagWriter_39.write(bw)
        writeInner(v);
      }
    } else {
      bw.int8(-3);
    }
    
  };
  
  return {
    read,
    readInner,
    write,
    writeInner,
    meta: {
      "fixedSize": 67,
      "needToWriteRef": true,
      "type": 256
    }
  };
}
}"
`;

exports[`codeGen can generate tuple declaration code 2`] = `
"function anonymous(
) {
return function(fury, external) {
  const br = fury.binaryReader;
  const bw = fury.binaryWriter;
  const cr = fury.classResolver;
  const rr = fury.referenceResolver;
  const tagWriter_17 = cr.createTagWriter("tuple-object-type3-tag");
  
  const readInner = (fromRef) => {
    
    if (br.int32() !== 552) {
      throw new Error("validate hash failed: tuple-object-type3-tag. expect 552");
    }
    const result_0 = {
      tuple: null
    };
    
    if (fromRef) {
      rr.reference(result_0)
    } else {
      
    }
    
    
    let fromRef_1 = false;
    switch (br.int8()) {
      case 0:
        fromRef_1 = true;
      case -1:
      case 0:
        if (br.int16() === 256) {
          cr.readTag(br);
        }
        
        const len_3 = br.varUInt32();
        const result_2 = new Array(len_3);
        
        if (fromRef_1) {
          rr.reference(result_2)
        } else {
          
        }
        
        
        if (len_3 > 0) {
          
          let fromRef_4 = false;
          switch (br.int8()) {
            case 0:
              fromRef_4 = true;
            case -1:
            case 0:
              if (br.int16() === 256) {
                cr.readTag(br);
              }
              result_2[0] = br.stringOfVarUInt32()
              break;
            case -2:
              result_2[0] = rr.getReadObject(br.varUInt32())
              break;
            case -3:
              result_2[0] = null
              break;
          }
          
        }
        
        
        if (len_3 > 1) {
          
          let fromRef_5 = false;
          switch (br.int8()) {
            case 0:
              fromRef_5 = true;
            case -1:
            case 0:
              if (br.int16() === 256) {
                cr.readTag(br);
              }
              result_2[1] = br.uint8() === 1
              break;
            case -2:
              result_2[1] = rr.getReadObject(br.varUInt32())
              break;
            case -3:
              result_2[1] = null
              break;
          }
          
        }
        
        
        if (len_3 > 2) {
          
          let fromRef_6 = false;
          switch (br.int8()) {
            case 0:
              fromRef_6 = true;
            case -1:
            case 0:
              if (br.int16() === 256) {
                cr.readTag(br);
              }
              result_2[2] = br.uint32()
              break;
            case -2:
              result_2[2] = rr.getReadObject(br.varUInt32())
              break;
            case -3:
              result_2[2] = null
              break;
          }
          
        }
        
        
        if (len_3 > 3) {
          
          let fromRef_7 = false;
          switch (br.int8()) {
            case 0:
              fromRef_7 = true;
            case -1:
            case 0:
              if (br.int16() === 256) {
                cr.readTag(br);
              }
              
              const len_9 = br.varUInt32();
              const result_8 = new Array(len_9);
              
              if (fromRef_7) {
                rr.reference(result_8)
              } else {
                
              }
              
              
              if (len_9 > 0) {
                
                let fromRef_10 = false;
                switch (br.int8()) {
                  case 0:
                    fromRef_10 = true;
                  case -1:
                  case 0:
                    if (br.int16() === 256) {
                      cr.readTag(br);
                    }
                    
                    br.uint8()
                    result_11 = br.buffer(br.int32());
                    
                    if (fromRef_10) {
                      rr.reference(result_11)
                    } else {
                      
                    };
                    result_8[0] = result_11
                    
                    break;
                  case -2:
                    result_8[0] = rr.getReadObject(br.varUInt32())
                    break;
                  case -3:
                    result_8[0] = null
                    break;
                }
                
              }
              
              result_2[3] = result_8
              
              break;
            case -2:
              result_2[3] = rr.getReadObject(br.varUInt32())
              break;
            case -3:
              result_2[3] = null
              break;
          }
          
        }
        
        result_0.tuple = result_2
        
        break;
      case -2:
        result_0.tuple = rr.getReadObject(br.varUInt32())
        break;
      case -3:
        result_0.tuple = null
        break;
    }
    
    return result_0
    
  };
  const read = () => {
    
    let fromRef_12 = false;
    switch (br.int8()) {
      case 0:
        fromRef_12 = true;
      case -1:
      case 0:
        if (br.int16() === 256) {
          cr.readTag(br);
        }
        return readInner(true)
        break;
      case -2:
        return rr.getReadObject(br.varUInt32())
        break;
      case -3:
        return null
        break;
    }
    
  };
  const writeInner = (v) => {
    
    bw.int32(552);
    
    if (v.tuple !== null && v.tuple !== undefined) {
      const existsId_13 = rr.existsWriteObject(v.tuple);
      if (typeof existsId_13 === "number") {
        bw.int8(-2)
        bw.varUInt32(existsId_13)
      } else {
        rr.writeRef(v.tuple)
        bw.int24(6400);
        
        
        bw.varUInt32(4)
        bw.reserve(26);
        
        if (v.tuple[0] !== null && v.tuple[0] !== undefined) {
          bw.int24(3583);
          
          bw.stringOfVarUInt32(v.tuple[0]);
        } else {
          bw.int8(-3);
        }
        
        if (v.tuple[1] !== null && v.tuple[1] !== undefined) {
          bw.int24(511);
          
          bw.uint8(v.tuple[1] ? 1 : 0);
        } else {
          bw.int8(-3);
        }
        
        if (v.tuple[2] !== null && v.tuple[2] !== undefined) {
          bw.int24(1791);
          
          bw.uint32(v.tuple[2]);
        } else {
          bw.int8(-3);
        }
        
        if (v.tuple[3] !== null && v.tuple[3] !== undefined) {
          const existsId_14 = rr.existsWriteObject(v.tuple[3]);
          if (typeof existsId_14 === "number") {
            bw.int8(-2)
            bw.varUInt32(existsId_14)
          } else {
            rr.writeRef(v.tuple[3])
            bw.int24(6400);
            
            
            bw.varUInt32(1)
            bw.reserve(8);
            
            if (v.tuple[3][0] !== null && v.tuple[3][0] !== undefined) {
              const existsId_15 = rr.existsWriteObject(v.tuple[3][0]);
              if (typeof existsId_15 === "number") {
                bw.int8(-2)
                bw.varUInt32(existsId_15)
              } else {
                rr.writeRef(v.tuple[3][0])
                bw.int24(3584);
                
                
                bw.uint8(1)
                bw.uint32(v.tuple[3][0].byteLength)
                bw.buffer(v.tuple[3][0]);
              }
            } else {
              bw.int8(-3);
            }
            
            ;
          }
        } else {
          bw.int8(-3);
        }
        
        ;
      }
    } else {
      bw.int8(-3);
    }
    
    
  };
  const write = (v) => {
    
    if (v !== null && v !== undefined) {
      const existsId_16 = rr.existsWriteObject(v);
      if (typeof existsId_16 === "number") {
        bw.int8(-2)
        bw.varUInt32(existsId_16)
      } else {
        rr.writeRef(v)
        bw.int24(65536);
        tagWriter_17.write(bw)
        writeInner(v);
      }
    } else {
      bw.int8(-3);
    }
    
  };
  
  return {
    read,
    readInner,
    write,
    writeInner,
    meta: {
      "fixedSize": 48,
      "needToWriteRef": true,
      "type": 256
    }
  };
}
}"
`;
